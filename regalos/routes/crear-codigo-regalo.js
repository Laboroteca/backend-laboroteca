// üìÇ Ruta: /regalos/routes/crear-codigo-regalo.js
// 

// üìÇ regalos/routes/crear-codigo-regalo.js
const express = require('express');
const admin = require('../../firebase');
const firestore = admin.firestore();

const { google } = require('googleapis');
const { auth } = require('../../entradas/google/sheetsAuth'); // ‚úÖ Usa el auth centralizado

const router = express.Router();

// üìÑ Hoja de control de C√ìDIGOS REGALO (previos al canje)
const SHEET_ID_CONTROL = '1DFZuhJtuQ0y8EHXOkUUifR_mCVfGyxgCHXRvBoiwfo';
const SHEET_NAME_CONTROL = 'Hoja 1';

/**
 * üìå POST /crear-codigo-regalo
 * Crea un c√≥digo REG- √∫nico y lo asocia a un email.
 * Body: { nombre, email, codigo }
 */
router.post('/crear-codigo-regalo', async (req, res) => {
  try {
    const nombreRaw = (req.body?.nombre || '').trim();
    const emailRaw  = (req.body?.email  || '').trim().toLowerCase();
    const codigoRaw = (req.body?.codigo || '').trim().toUpperCase();

    // üîç Validaciones
    if (!nombreRaw || !emailRaw || !codigoRaw) {
      return res.status(400).json({
        ok: false,
        error: 'Faltan campos obligatorios: nombre, email y codigo.'
      });
    }
    if (!/^[^@]+@[^@]+\.[^@]+$/.test(emailRaw)) {
      return res.status(400).json({ ok: false, error: 'Email inv√°lido.' });
    }
    if (!/^REG-[A-Z0-9-]+$/.test(codigoRaw)) {
      return res.status(400).json({
        ok: false,
        error: 'El c√≥digo debe empezar por REG- y solo contener letras, n√∫meros o guiones.'
      });
    }

    // ‚õî Idempotencia: rechaza si ya existe
    const docRef = firestore.collection('codigosRegalo').doc(codigoRaw);
    const snap = await docRef.get();
    if (snap.exists) {
      return res.status(409).json({
        ok: false,
        error: 'Este c√≥digo ya ha sido registrado previamente.'
      });
    }

    // üíæ Guarda en Firestore
    await docRef.set({
      nombre: nombreRaw,
      email: emailRaw,
      codigo: codigoRaw,
      creado: new Date().toISOString(),
      usado: false,
    });

    // üìù Registrar en Google Sheets (control de REG-)
    try {
      const authClient = await auth();
      const sheets = google.sheets({ version: 'v4', auth: authClient });

      await sheets.spreadsheets.values.append({
        spreadsheetId: SHEET_ID_CONTROL,
        range: `${SHEET_NAME_CONTROL}!A2:D`,
        valueInputOption: 'USER_ENTERED',
        requestBody: {
          // A: Nombre, B: Email, C: C√≥digo, D: Ignacio o Rebeca (vac√≠o por ahora)
          values: [[ nombreRaw, emailRaw, codigoRaw, '' ]],
        },
      });
    } catch (e) {
      console.warn('‚ö†Ô∏è No se pudo registrar en Sheets (control REG-):', e.message || e);
      // No interrumpimos la creaci√≥n por fallo de Sheets
    }

    console.log(`üéÅ C√≥digo REGALO creado: ${codigoRaw} para ${emailRaw}`);
    return res.status(201).json({ ok: true, codigo: codigoRaw });

  } catch (err) {
    console.error('‚ùå Error al crear c√≥digo regalo:', err?.message || err);
    return res.status(500).json({
      ok: false,
      error: 'Error interno del servidor.'
    });
  }
});

// ‚úÖ Exportamos el router para app.use()
module.exports = router;
